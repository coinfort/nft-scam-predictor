name: Pipeline

on:
  push:
    branches:
      - 'master'
      - 'feature**'
  delete:
    branches:
      - 'feature**'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_RESOURCE_SOURCE: ${{ secrets.S3_RESOURCE_SOURCE }}
  S3_LOCAL_DESTINATION: ${{ secrets.S3_LOCAL_DESTINATION }}
  S3_ENV_SOURCE: ${{ secrets.S3_ENV_SOURCE }}
  S3_ENV_DESTINATION: ${{ secrets.S3_ENV_DESTINATION }}
  INTEGRATION_TESTS_URL: ${{ secrets.INTEGRATION_TESTS_URL }}
  INTEGRATION_TESTS_API_KEY: ${{ secrets.INTEGRATION_TESTS_API_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: nft-scam-predictor-DEV
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::692666379301:role/aws-sam-cli-managed-dev-pipe-PipelineExecutionRole-2S5Y1C4C3A4V
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::692666379301:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-Q79YG9C76B52
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket-19od8hberq2ku
  TESTING_IMAGE_REPOSITORY: 692666379301.dkr.ecr.eu-central-1.amazonaws.com/aws-sam-cli-managed-dev-pipeline-resources-imagerepository-m4eo63mlblui
  TESTING_REGION: eu-central-1
  PROD_STACK_NAME: nft-scam-predictor-PROD
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::692666379301:role/aws-sam-cli-managed-prod-pip-PipelineExecutionRole-1LUAFNM51WIYK
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::692666379301:role/aws-sam-cli-managed-prod-CloudFormationExecutionR-LUZ9L9JREMYF
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline-artifactsbucket-1jvzpgzgb126t
  PROD_IMAGE_REPOSITORY: 692666379301.dkr.ecr.eu-central-1.amazonaws.com/aws-sam-cli-managed-prod-pipeline-resources-imagerepository-has52nlxb8cy
  PROD_REGION: eu-central-1

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the tests here

  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: aws-actions/setup-sam@v2

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam delete \
            --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region ${TESTING_REGION} \
            --no-prompts

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    # https://github.com/actions/setup-python
    # https://github.com/aws-actions/configure-aws-credentials#notice-node12-deprecation-warning
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: aws-actions/setup-sam@v2

      - name: Copy resources

        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          source: ${{ env.S3_RESOURCE_SOURCE }}
          dest: ${{ env.S3_LOCAL_DESTINATION }}
          aws_region: ${{ env.TESTING_REGION }}
          flags: '--recursive --quiet'

      - name: Copy environment
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          source: ${{ env.S3_ENV_SOURCE }}
          dest: ${{ env.S3_ENV_DESTINATION }}
          aws_region: ${{ env.TESTING_REGION }}
          flags: '--quiet'

      - name: Build feature
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the testing account
        shell: bash
        run: |
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  build-and-package:
    if: github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: aws-actions/setup-sam@v2

      - name: Copy resources

        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          source: ${{ env.S3_RESOURCE_SOURCE }}
          dest: ${{ env.S3_LOCAL_DESTINATION }}
          aws_region: ${{ env.TESTING_REGION }}
          flags: '--recursive --quiet'

      - name: Copy environment

        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          source: ${{ env.S3_ENV_SOURCE }}
          dest: ${{ env.S3_ENV_DESTINATION }}
          aws_region: ${{ env.TESTING_REGION }}
          flags: '--quiet'

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to testing artifact buckets
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-testing.yaml
          path: packaged-testing.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-testing:
    if: github.ref == 'refs/heads/master'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: aws-actions/setup-sam@v2
      - uses: actions/download-artifact@v2
        with:
          name: packaged-testing.yaml

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  integration-test:
    if: github.ref == 'refs/heads/master'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run integration tests
        run: |
          python3 tests/integration/tests.py ${INTEGRATION_TESTS_URL} ${INTEGRATION_TESTS_API_KEY}

  approve-prod-deploy:
    if: github.ref == 'refs/heads/master'
    needs: [integration-test]
    runs-on: ubuntu-latest
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: olegggatttor,EgorBa,Danielto1404
          minimum-approvals: 1
          issue-title: "Deploying ${{ github.ref }}"
          issue-body: "Please approve or deny the deployment of ${{ github.ref }}"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: '+'
          additional-denied-words: '-'

  deploy-prod:
    if: github.ref == 'refs/heads/master'
    needs: [approve-prod-deploy]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: aws-actions/setup-sam@v2
      - uses: actions/download-artifact@v2
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
